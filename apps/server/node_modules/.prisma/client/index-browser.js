
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 3.6.0
 * Query Engine version: dc520b92b1ebb2d28dc3161f9f82e875bd35d727
 */
Prisma.prismaVersion = {
  client: "3.6.0",
  engine: "dc520b92b1ebb2d28dc3161f9f82e875bd35d727"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = 'DbNull'
Prisma.JsonNull = 'JsonNull'
Prisma.AnyNull = 'AnyNull'

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.UserScalarFieldEnum = makeEnum({
  id: 'id',
  email: 'email',
  role: 'role',
  name: 'name',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.CompanyScalarFieldEnum = makeEnum({
  id: 'id',
  userId: 'userId',
  name: 'name',
  description: 'description',
  logo: 'logo',
  website: 'website',
  CIN: 'CIN',
  email: 'email',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.InternScalarFieldEnum = makeEnum({
  id: 'id',
  userId: 'userId',
  bio: 'bio',
  interests: 'interests',
  email: 'email',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.JobApplicationScalarFieldEnum = makeEnum({
  id: 'id',
  description: 'description',
  status: 'status',
  internId: 'internId',
  jobId: 'jobId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.JobScalarFieldEnum = makeEnum({
  id: 'id',
  position: 'position',
  description: 'description',
  jobType: 'jobType',
  skillsRequired: 'skillsRequired',
  numOfOpenings: 'numOfOpenings',
  duration: 'duration',
  postedAt: 'postedAt',
  location: 'location',
  salary: 'salary',
  industry: 'industry',
  closed: 'closed',
  companyId: 'companyId',
  updatedAt: 'updatedAt'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});

exports.Prisma.QueryMode = makeEnum({
  default: 'default',
  insensitive: 'insensitive'
});
exports.Role = makeEnum({
  ADMINISTRATOR: 'ADMINISTRATOR',
  EMPLOYER: 'EMPLOYER',
  INTERN: 'INTERN',
  STANDARD: 'STANDARD'
});

exports.Status = makeEnum({
  APPLIED: 'APPLIED',
  REJECTED: 'REJECTED',
  HIRED: 'HIRED'
});

exports.JobType = makeEnum({
  PART_TIME: 'PART_TIME',
  FULL_TIME: 'FULL_TIME'
});

exports.Tag = makeEnum({
  Marketing: 'Marketing',
  Graphic_Design: 'Graphic_Design',
  Education: 'Education',
  Programming: 'Programming',
  Communication: 'Communication',
  Charity: 'Charity'
});

exports.Prisma.ModelName = makeEnum({
  User: 'User',
  Company: 'Company',
  Intern: 'Intern',
  JobApplication: 'JobApplication',
  Job: 'Job'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
