"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.applyInputTypesEnhanceMap = exports.applyOutputTypesEnhanceMap = exports.applyModelsEnhanceMap = exports.applyRelationResolversEnhanceMap = exports.applyArgsTypesEnhanceMap = exports.applyResolversEnhanceMap = void 0;
const tslib_1 = require("tslib");
const tslib = (0, tslib_1.__importStar)(require("tslib"));
const crudResolvers = (0, tslib_1.__importStar)(require("./resolvers/crud/resolvers-crud.index"));
const argsTypes = (0, tslib_1.__importStar)(require("./resolvers/crud/args.index"));
const actionResolvers = (0, tslib_1.__importStar)(require("./resolvers/crud/resolvers-actions.index"));
const relationResolvers = (0, tslib_1.__importStar)(require("./resolvers/relations/resolvers.index"));
const models = (0, tslib_1.__importStar)(require("./models"));
const outputTypes = (0, tslib_1.__importStar)(require("./resolvers/outputs"));
const inputTypes = (0, tslib_1.__importStar)(require("./resolvers/inputs"));
const crudResolversMap = {
    User: crudResolvers.UserCrudResolver,
    Company: crudResolvers.CompanyCrudResolver,
    Intern: crudResolvers.InternCrudResolver,
    JobApplication: crudResolvers.JobApplicationCrudResolver,
    Job: crudResolvers.JobCrudResolver
};
const actionResolversMap = {
    User: {
        user: actionResolvers.FindUniqueUserResolver,
        findFirstUser: actionResolvers.FindFirstUserResolver,
        users: actionResolvers.FindManyUserResolver,
        createUser: actionResolvers.CreateUserResolver,
        createManyUser: actionResolvers.CreateManyUserResolver,
        deleteUser: actionResolvers.DeleteUserResolver,
        updateUser: actionResolvers.UpdateUserResolver,
        deleteManyUser: actionResolvers.DeleteManyUserResolver,
        updateManyUser: actionResolvers.UpdateManyUserResolver,
        upsertUser: actionResolvers.UpsertUserResolver,
        aggregateUser: actionResolvers.AggregateUserResolver,
        groupByUser: actionResolvers.GroupByUserResolver
    },
    Company: {
        company: actionResolvers.FindUniqueCompanyResolver,
        findFirstCompany: actionResolvers.FindFirstCompanyResolver,
        companies: actionResolvers.FindManyCompanyResolver,
        createCompany: actionResolvers.CreateCompanyResolver,
        createManyCompany: actionResolvers.CreateManyCompanyResolver,
        deleteCompany: actionResolvers.DeleteCompanyResolver,
        updateCompany: actionResolvers.UpdateCompanyResolver,
        deleteManyCompany: actionResolvers.DeleteManyCompanyResolver,
        updateManyCompany: actionResolvers.UpdateManyCompanyResolver,
        upsertCompany: actionResolvers.UpsertCompanyResolver,
        aggregateCompany: actionResolvers.AggregateCompanyResolver,
        groupByCompany: actionResolvers.GroupByCompanyResolver
    },
    Intern: {
        intern: actionResolvers.FindUniqueInternResolver,
        findFirstIntern: actionResolvers.FindFirstInternResolver,
        interns: actionResolvers.FindManyInternResolver,
        createIntern: actionResolvers.CreateInternResolver,
        createManyIntern: actionResolvers.CreateManyInternResolver,
        deleteIntern: actionResolvers.DeleteInternResolver,
        updateIntern: actionResolvers.UpdateInternResolver,
        deleteManyIntern: actionResolvers.DeleteManyInternResolver,
        updateManyIntern: actionResolvers.UpdateManyInternResolver,
        upsertIntern: actionResolvers.UpsertInternResolver,
        aggregateIntern: actionResolvers.AggregateInternResolver,
        groupByIntern: actionResolvers.GroupByInternResolver
    },
    JobApplication: {
        jobApplication: actionResolvers.FindUniqueJobApplicationResolver,
        findFirstJobApplication: actionResolvers.FindFirstJobApplicationResolver,
        jobApplications: actionResolvers.FindManyJobApplicationResolver,
        createJobApplication: actionResolvers.CreateJobApplicationResolver,
        createManyJobApplication: actionResolvers.CreateManyJobApplicationResolver,
        deleteJobApplication: actionResolvers.DeleteJobApplicationResolver,
        updateJobApplication: actionResolvers.UpdateJobApplicationResolver,
        deleteManyJobApplication: actionResolvers.DeleteManyJobApplicationResolver,
        updateManyJobApplication: actionResolvers.UpdateManyJobApplicationResolver,
        upsertJobApplication: actionResolvers.UpsertJobApplicationResolver,
        aggregateJobApplication: actionResolvers.AggregateJobApplicationResolver,
        groupByJobApplication: actionResolvers.GroupByJobApplicationResolver
    },
    Job: {
        job: actionResolvers.FindUniqueJobResolver,
        findFirstJob: actionResolvers.FindFirstJobResolver,
        jobs: actionResolvers.FindManyJobResolver,
        createJob: actionResolvers.CreateJobResolver,
        createManyJob: actionResolvers.CreateManyJobResolver,
        deleteJob: actionResolvers.DeleteJobResolver,
        updateJob: actionResolvers.UpdateJobResolver,
        deleteManyJob: actionResolvers.DeleteManyJobResolver,
        updateManyJob: actionResolvers.UpdateManyJobResolver,
        upsertJob: actionResolvers.UpsertJobResolver,
        aggregateJob: actionResolvers.AggregateJobResolver,
        groupByJob: actionResolvers.GroupByJobResolver
    }
};
const crudResolversInfo = {
    User: ["user", "findFirstUser", "users", "createUser", "createManyUser", "deleteUser", "updateUser", "deleteManyUser", "updateManyUser", "upsertUser", "aggregateUser", "groupByUser"],
    Company: ["company", "findFirstCompany", "companies", "createCompany", "createManyCompany", "deleteCompany", "updateCompany", "deleteManyCompany", "updateManyCompany", "upsertCompany", "aggregateCompany", "groupByCompany"],
    Intern: ["intern", "findFirstIntern", "interns", "createIntern", "createManyIntern", "deleteIntern", "updateIntern", "deleteManyIntern", "updateManyIntern", "upsertIntern", "aggregateIntern", "groupByIntern"],
    JobApplication: ["jobApplication", "findFirstJobApplication", "jobApplications", "createJobApplication", "createManyJobApplication", "deleteJobApplication", "updateJobApplication", "deleteManyJobApplication", "updateManyJobApplication", "upsertJobApplication", "aggregateJobApplication", "groupByJobApplication"],
    Job: ["job", "findFirstJob", "jobs", "createJob", "createManyJob", "deleteJob", "updateJob", "deleteManyJob", "updateManyJob", "upsertJob", "aggregateJob", "groupByJob"]
};
const argsInfo = {
    FindUniqueUserArgs: ["where"],
    FindFirstUserArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyUserArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateUserArgs: ["data"],
    CreateManyUserArgs: ["data", "skipDuplicates"],
    DeleteUserArgs: ["where"],
    UpdateUserArgs: ["data", "where"],
    DeleteManyUserArgs: ["where"],
    UpdateManyUserArgs: ["data", "where"],
    UpsertUserArgs: ["where", "create", "update"],
    AggregateUserArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByUserArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueCompanyArgs: ["where"],
    FindFirstCompanyArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyCompanyArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateCompanyArgs: ["data"],
    CreateManyCompanyArgs: ["data", "skipDuplicates"],
    DeleteCompanyArgs: ["where"],
    UpdateCompanyArgs: ["data", "where"],
    DeleteManyCompanyArgs: ["where"],
    UpdateManyCompanyArgs: ["data", "where"],
    UpsertCompanyArgs: ["where", "create", "update"],
    AggregateCompanyArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByCompanyArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueInternArgs: ["where"],
    FindFirstInternArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyInternArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateInternArgs: ["data"],
    CreateManyInternArgs: ["data", "skipDuplicates"],
    DeleteInternArgs: ["where"],
    UpdateInternArgs: ["data", "where"],
    DeleteManyInternArgs: ["where"],
    UpdateManyInternArgs: ["data", "where"],
    UpsertInternArgs: ["where", "create", "update"],
    AggregateInternArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByInternArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueJobApplicationArgs: ["where"],
    FindFirstJobApplicationArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyJobApplicationArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateJobApplicationArgs: ["data"],
    CreateManyJobApplicationArgs: ["data", "skipDuplicates"],
    DeleteJobApplicationArgs: ["where"],
    UpdateJobApplicationArgs: ["data", "where"],
    DeleteManyJobApplicationArgs: ["where"],
    UpdateManyJobApplicationArgs: ["data", "where"],
    UpsertJobApplicationArgs: ["where", "create", "update"],
    AggregateJobApplicationArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByJobApplicationArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueJobArgs: ["where"],
    FindFirstJobArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyJobArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateJobArgs: ["data"],
    CreateManyJobArgs: ["data", "skipDuplicates"],
    DeleteJobArgs: ["where"],
    UpdateJobArgs: ["data", "where"],
    DeleteManyJobArgs: ["where"],
    UpdateManyJobArgs: ["data", "where"],
    UpsertJobArgs: ["where", "create", "update"],
    AggregateJobArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByJobArgs: ["where", "orderBy", "by", "having", "take", "skip"]
};
function applyResolversEnhanceMap(resolversEnhanceMap) {
    for (const resolversEnhanceMapKey of Object.keys(resolversEnhanceMap)) {
        const modelName = resolversEnhanceMapKey;
        const crudTarget = crudResolversMap[modelName].prototype;
        const resolverActionsConfig = resolversEnhanceMap[modelName];
        const actionResolversConfig = actionResolversMap[modelName];
        if (resolverActionsConfig._all) {
            const allActionsDecorators = resolverActionsConfig._all;
            const resolverActionNames = crudResolversInfo[modelName];
            for (const resolverActionName of resolverActionNames) {
                const actionTarget = actionResolversConfig[resolverActionName].prototype;
                tslib.__decorate(allActionsDecorators, crudTarget, resolverActionName, null);
                tslib.__decorate(allActionsDecorators, actionTarget, resolverActionName, null);
            }
        }
        const resolverActionsToApply = Object.keys(resolverActionsConfig).filter(it => it !== "_all");
        for (const resolverActionName of resolverActionsToApply) {
            const decorators = resolverActionsConfig[resolverActionName];
            const actionTarget = actionResolversConfig[resolverActionName].prototype;
            tslib.__decorate(decorators, crudTarget, resolverActionName, null);
            tslib.__decorate(decorators, actionTarget, resolverActionName, null);
        }
    }
}
exports.applyResolversEnhanceMap = applyResolversEnhanceMap;
function applyArgsTypesEnhanceMap(argsTypesEnhanceMap) {
    for (const argsTypesEnhanceMapKey of Object.keys(argsTypesEnhanceMap)) {
        const argsTypeName = argsTypesEnhanceMapKey;
        const typeConfig = argsTypesEnhanceMap[argsTypeName];
        const typeClass = argsTypes[argsTypeName];
        const typeTarget = typeClass.prototype;
        applyTypeClassEnhanceConfig(typeConfig, typeClass, typeTarget, argsInfo[argsTypeName]);
    }
}
exports.applyArgsTypesEnhanceMap = applyArgsTypesEnhanceMap;
const relationResolversMap = {
    Company: relationResolvers.CompanyRelationsResolver,
    Intern: relationResolvers.InternRelationsResolver,
    JobApplication: relationResolvers.JobApplicationRelationsResolver,
    Job: relationResolvers.JobRelationsResolver
};
const relationResolversInfo = {
    Company: ["jobs"],
    Intern: ["jobApplications"],
    JobApplication: ["intern", "job"],
    Job: ["applications", "company"]
};
function applyRelationResolversEnhanceMap(relationResolversEnhanceMap) {
    for (const relationResolversEnhanceMapKey of Object.keys(relationResolversEnhanceMap)) {
        const modelName = relationResolversEnhanceMapKey;
        const relationResolverTarget = relationResolversMap[modelName].prototype;
        const relationResolverActionsConfig = relationResolversEnhanceMap[modelName];
        if (relationResolverActionsConfig._all) {
            const allActionsDecorators = relationResolverActionsConfig._all;
            const relationResolverActionNames = relationResolversInfo[modelName];
            for (const relationResolverActionName of relationResolverActionNames) {
                tslib.__decorate(allActionsDecorators, relationResolverTarget, relationResolverActionName, null);
            }
        }
        const relationResolverActionsToApply = Object.keys(relationResolverActionsConfig).filter(it => it !== "_all");
        for (const relationResolverActionName of relationResolverActionsToApply) {
            const decorators = relationResolverActionsConfig[relationResolverActionName];
            tslib.__decorate(decorators, relationResolverTarget, relationResolverActionName, null);
        }
    }
}
exports.applyRelationResolversEnhanceMap = applyRelationResolversEnhanceMap;
function applyTypeClassEnhanceConfig(enhanceConfig, typeClass, typePrototype, typeFieldNames) {
    if (enhanceConfig.class) {
        tslib.__decorate(enhanceConfig.class, typeClass);
    }
    if (enhanceConfig.fields) {
        if (enhanceConfig.fields._all) {
            const allFieldsDecorators = enhanceConfig.fields._all;
            for (const typeFieldName of typeFieldNames) {
                tslib.__decorate(allFieldsDecorators, typePrototype, typeFieldName, void 0);
            }
        }
        const configFieldsToApply = Object.keys(enhanceConfig.fields).filter(it => it !== "_all");
        for (const typeFieldName of configFieldsToApply) {
            const fieldDecorators = enhanceConfig.fields[typeFieldName];
            tslib.__decorate(fieldDecorators, typePrototype, typeFieldName, void 0);
        }
    }
}
const modelsInfo = {
    User: ["id", "email", "role", "name", "createdAt", "updatedAt"],
    Company: ["id", "userId", "name", "description", "logo", "website", "CIN", "email", "createdAt", "updatedAt"],
    Intern: ["id", "userId", "bio", "interests", "email", "createdAt", "updatedAt"],
    JobApplication: ["id", "description", "status", "internId", "jobId", "createdAt", "updatedAt"],
    Job: ["id", "position", "description", "jobType", "skillsRequired", "numOfOpenings", "duration", "postedAt", "location", "salary", "industry", "closed", "companyId", "updatedAt"]
};
function applyModelsEnhanceMap(modelsEnhanceMap) {
    for (const modelsEnhanceMapKey of Object.keys(modelsEnhanceMap)) {
        const modelName = modelsEnhanceMapKey;
        const modelConfig = modelsEnhanceMap[modelName];
        const modelClass = models[modelName];
        const modelTarget = modelClass.prototype;
        applyTypeClassEnhanceConfig(modelConfig, modelClass, modelTarget, modelsInfo[modelName]);
    }
}
exports.applyModelsEnhanceMap = applyModelsEnhanceMap;
const outputsInfo = {
    AggregateUser: ["_count", "_avg", "_sum", "_min", "_max"],
    UserGroupBy: ["id", "email", "role", "name", "createdAt", "updatedAt", "_count", "_avg", "_sum", "_min", "_max"],
    AggregateCompany: ["_count", "_avg", "_sum", "_min", "_max"],
    CompanyGroupBy: ["id", "userId", "name", "description", "logo", "website", "CIN", "email", "createdAt", "updatedAt", "_count", "_avg", "_sum", "_min", "_max"],
    AggregateIntern: ["_count", "_avg", "_sum", "_min", "_max"],
    InternGroupBy: ["id", "userId", "bio", "interests", "email", "createdAt", "updatedAt", "_count", "_avg", "_sum", "_min", "_max"],
    AggregateJobApplication: ["_count", "_avg", "_sum", "_min", "_max"],
    JobApplicationGroupBy: ["id", "description", "status", "internId", "jobId", "createdAt", "updatedAt", "_count", "_avg", "_sum", "_min", "_max"],
    AggregateJob: ["_count", "_avg", "_sum", "_min", "_max"],
    JobGroupBy: ["id", "position", "description", "jobType", "skillsRequired", "numOfOpenings", "duration", "postedAt", "location", "salary", "industry", "closed", "companyId", "updatedAt", "_count", "_avg", "_sum", "_min", "_max"],
    AffectedRowsOutput: ["count"],
    UserCountAggregate: ["id", "email", "role", "name", "createdAt", "updatedAt", "_all"],
    UserAvgAggregate: ["id"],
    UserSumAggregate: ["id"],
    UserMinAggregate: ["id", "email", "role", "name", "createdAt", "updatedAt"],
    UserMaxAggregate: ["id", "email", "role", "name", "createdAt", "updatedAt"],
    CompanyCount: ["jobs"],
    CompanyCountAggregate: ["id", "userId", "name", "description", "logo", "website", "CIN", "email", "createdAt", "updatedAt", "_all"],
    CompanyAvgAggregate: ["id", "userId"],
    CompanySumAggregate: ["id", "userId"],
    CompanyMinAggregate: ["id", "userId", "name", "description", "logo", "website", "CIN", "email", "createdAt", "updatedAt"],
    CompanyMaxAggregate: ["id", "userId", "name", "description", "logo", "website", "CIN", "email", "createdAt", "updatedAt"],
    InternCount: ["jobApplications"],
    InternCountAggregate: ["id", "userId", "bio", "interests", "email", "createdAt", "updatedAt", "_all"],
    InternAvgAggregate: ["id", "userId"],
    InternSumAggregate: ["id", "userId"],
    InternMinAggregate: ["id", "userId", "bio", "email", "createdAt", "updatedAt"],
    InternMaxAggregate: ["id", "userId", "bio", "email", "createdAt", "updatedAt"],
    JobApplicationCountAggregate: ["id", "description", "status", "internId", "jobId", "createdAt", "updatedAt", "_all"],
    JobApplicationAvgAggregate: ["id", "internId", "jobId"],
    JobApplicationSumAggregate: ["id", "internId", "jobId"],
    JobApplicationMinAggregate: ["id", "description", "status", "internId", "jobId", "createdAt", "updatedAt"],
    JobApplicationMaxAggregate: ["id", "description", "status", "internId", "jobId", "createdAt", "updatedAt"],
    JobCount: ["applications"],
    JobCountAggregate: ["id", "position", "description", "jobType", "skillsRequired", "numOfOpenings", "duration", "postedAt", "location", "salary", "industry", "closed", "companyId", "updatedAt", "_all"],
    JobAvgAggregate: ["id", "numOfOpenings", "companyId"],
    JobSumAggregate: ["id", "numOfOpenings", "companyId"],
    JobMinAggregate: ["id", "position", "description", "jobType", "numOfOpenings", "duration", "postedAt", "location", "salary", "industry", "closed", "companyId", "updatedAt"],
    JobMaxAggregate: ["id", "position", "description", "jobType", "numOfOpenings", "duration", "postedAt", "location", "salary", "industry", "closed", "companyId", "updatedAt"]
};
function applyOutputTypesEnhanceMap(outputTypesEnhanceMap) {
    for (const outputTypeEnhanceMapKey of Object.keys(outputTypesEnhanceMap)) {
        const outputTypeName = outputTypeEnhanceMapKey;
        const typeConfig = outputTypesEnhanceMap[outputTypeName];
        const typeClass = outputTypes[outputTypeName];
        const typeTarget = typeClass.prototype;
        applyTypeClassEnhanceConfig(typeConfig, typeClass, typeTarget, outputsInfo[outputTypeName]);
    }
}
exports.applyOutputTypesEnhanceMap = applyOutputTypesEnhanceMap;
const inputsInfo = {
    UserWhereInput: ["AND", "OR", "NOT", "id", "email", "role", "name", "createdAt", "updatedAt"],
    UserOrderByWithRelationInput: ["id", "email", "role", "name", "createdAt", "updatedAt"],
    UserWhereUniqueInput: ["id", "email"],
    UserOrderByWithAggregationInput: ["id", "email", "role", "name", "createdAt", "updatedAt", "_count", "_avg", "_max", "_min", "_sum"],
    UserScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "email", "role", "name", "createdAt", "updatedAt"],
    CompanyWhereInput: ["AND", "OR", "NOT", "id", "userId", "name", "description", "logo", "website", "CIN", "jobs", "email", "createdAt", "updatedAt"],
    CompanyOrderByWithRelationInput: ["id", "userId", "name", "description", "logo", "website", "CIN", "jobs", "email", "createdAt", "updatedAt"],
    CompanyWhereUniqueInput: ["id", "userId", "name", "CIN", "email"],
    CompanyOrderByWithAggregationInput: ["id", "userId", "name", "description", "logo", "website", "CIN", "email", "createdAt", "updatedAt", "_count", "_avg", "_max", "_min", "_sum"],
    CompanyScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "userId", "name", "description", "logo", "website", "CIN", "email", "createdAt", "updatedAt"],
    InternWhereInput: ["AND", "OR", "NOT", "id", "userId", "bio", "interests", "jobApplications", "email", "createdAt", "updatedAt"],
    InternOrderByWithRelationInput: ["id", "userId", "bio", "interests", "jobApplications", "email", "createdAt", "updatedAt"],
    InternWhereUniqueInput: ["id", "userId", "email"],
    InternOrderByWithAggregationInput: ["id", "userId", "bio", "interests", "email", "createdAt", "updatedAt", "_count", "_avg", "_max", "_min", "_sum"],
    InternScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "userId", "bio", "interests", "email", "createdAt", "updatedAt"],
    JobApplicationWhereInput: ["AND", "OR", "NOT", "id", "description", "status", "internId", "intern", "jobId", "job", "createdAt", "updatedAt"],
    JobApplicationOrderByWithRelationInput: ["id", "description", "status", "internId", "intern", "jobId", "job", "createdAt", "updatedAt"],
    JobApplicationWhereUniqueInput: ["id"],
    JobApplicationOrderByWithAggregationInput: ["id", "description", "status", "internId", "jobId", "createdAt", "updatedAt", "_count", "_avg", "_max", "_min", "_sum"],
    JobApplicationScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "description", "status", "internId", "jobId", "createdAt", "updatedAt"],
    JobWhereInput: ["AND", "OR", "NOT", "id", "position", "description", "jobType", "skillsRequired", "numOfOpenings", "duration", "postedAt", "location", "salary", "industry", "closed", "applications", "companyId", "company", "updatedAt"],
    JobOrderByWithRelationInput: ["id", "position", "description", "jobType", "skillsRequired", "numOfOpenings", "duration", "postedAt", "location", "salary", "industry", "closed", "applications", "companyId", "company", "updatedAt"],
    JobWhereUniqueInput: ["id"],
    JobOrderByWithAggregationInput: ["id", "position", "description", "jobType", "skillsRequired", "numOfOpenings", "duration", "postedAt", "location", "salary", "industry", "closed", "companyId", "updatedAt", "_count", "_avg", "_max", "_min", "_sum"],
    JobScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "position", "description", "jobType", "skillsRequired", "numOfOpenings", "duration", "postedAt", "location", "salary", "industry", "closed", "companyId", "updatedAt"],
    UserCreateInput: ["email", "role", "name", "createdAt", "updatedAt"],
    UserUpdateInput: ["email", "role", "name", "createdAt", "updatedAt"],
    UserCreateManyInput: ["id", "email", "role", "name", "createdAt", "updatedAt"],
    UserUpdateManyMutationInput: ["email", "role", "name", "createdAt", "updatedAt"],
    CompanyCreateInput: ["userId", "name", "description", "logo", "website", "CIN", "email", "createdAt", "updatedAt", "jobs"],
    CompanyUpdateInput: ["userId", "name", "description", "logo", "website", "CIN", "email", "createdAt", "updatedAt", "jobs"],
    CompanyCreateManyInput: ["id", "userId", "name", "description", "logo", "website", "CIN", "email", "createdAt", "updatedAt"],
    CompanyUpdateManyMutationInput: ["userId", "name", "description", "logo", "website", "CIN", "email", "createdAt", "updatedAt"],
    InternCreateInput: ["userId", "bio", "email", "createdAt", "updatedAt", "interests", "jobApplications"],
    InternUpdateInput: ["userId", "bio", "email", "createdAt", "updatedAt", "interests", "jobApplications"],
    InternCreateManyInput: ["id", "userId", "bio", "email", "createdAt", "updatedAt", "interests"],
    InternUpdateManyMutationInput: ["userId", "bio", "email", "createdAt", "updatedAt", "interests"],
    JobApplicationCreateInput: ["description", "status", "createdAt", "updatedAt", "intern", "job"],
    JobApplicationUpdateInput: ["description", "status", "createdAt", "updatedAt", "intern", "job"],
    JobApplicationCreateManyInput: ["id", "description", "status", "internId", "jobId", "createdAt", "updatedAt"],
    JobApplicationUpdateManyMutationInput: ["description", "status", "createdAt", "updatedAt"],
    JobCreateInput: ["position", "description", "jobType", "numOfOpenings", "duration", "postedAt", "location", "salary", "industry", "closed", "updatedAt", "skillsRequired", "applications", "company"],
    JobUpdateInput: ["position", "description", "jobType", "numOfOpenings", "duration", "postedAt", "location", "salary", "industry", "closed", "updatedAt", "skillsRequired", "applications", "company"],
    JobCreateManyInput: ["id", "position", "description", "jobType", "numOfOpenings", "duration", "postedAt", "location", "salary", "industry", "closed", "companyId", "updatedAt", "skillsRequired"],
    JobUpdateManyMutationInput: ["position", "description", "jobType", "numOfOpenings", "duration", "postedAt", "location", "salary", "industry", "closed", "updatedAt", "skillsRequired"],
    IntFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    StringFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "mode", "not"],
    EnumRoleFilter: ["equals", "in", "notIn", "not"],
    StringNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "mode", "not"],
    DateTimeFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    UserCountOrderByAggregateInput: ["id", "email", "role", "name", "createdAt", "updatedAt"],
    UserAvgOrderByAggregateInput: ["id"],
    UserMaxOrderByAggregateInput: ["id", "email", "role", "name", "createdAt", "updatedAt"],
    UserMinOrderByAggregateInput: ["id", "email", "role", "name", "createdAt", "updatedAt"],
    UserSumOrderByAggregateInput: ["id"],
    IntWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_avg", "_sum", "_min", "_max"],
    StringWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "mode", "not", "_count", "_min", "_max"],
    EnumRoleWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    StringNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "mode", "not", "_count", "_min", "_max"],
    DateTimeWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_min", "_max"],
    JobListRelationFilter: ["every", "some", "none"],
    JobOrderByRelationAggregateInput: ["_count"],
    CompanyCountOrderByAggregateInput: ["id", "userId", "name", "description", "logo", "website", "CIN", "email", "createdAt", "updatedAt"],
    CompanyAvgOrderByAggregateInput: ["id", "userId"],
    CompanyMaxOrderByAggregateInput: ["id", "userId", "name", "description", "logo", "website", "CIN", "email", "createdAt", "updatedAt"],
    CompanyMinOrderByAggregateInput: ["id", "userId", "name", "description", "logo", "website", "CIN", "email", "createdAt", "updatedAt"],
    CompanySumOrderByAggregateInput: ["id", "userId"],
    StringNullableListFilter: ["equals", "has", "hasEvery", "hasSome", "isEmpty"],
    JobApplicationListRelationFilter: ["every", "some", "none"],
    JobApplicationOrderByRelationAggregateInput: ["_count"],
    InternCountOrderByAggregateInput: ["id", "userId", "bio", "interests", "email", "createdAt", "updatedAt"],
    InternAvgOrderByAggregateInput: ["id", "userId"],
    InternMaxOrderByAggregateInput: ["id", "userId", "bio", "email", "createdAt", "updatedAt"],
    InternMinOrderByAggregateInput: ["id", "userId", "bio", "email", "createdAt", "updatedAt"],
    InternSumOrderByAggregateInput: ["id", "userId"],
    EnumStatusFilter: ["equals", "in", "notIn", "not"],
    InternRelationFilter: ["is", "isNot"],
    JobRelationFilter: ["is", "isNot"],
    JobApplicationCountOrderByAggregateInput: ["id", "description", "status", "internId", "jobId", "createdAt", "updatedAt"],
    JobApplicationAvgOrderByAggregateInput: ["id", "internId", "jobId"],
    JobApplicationMaxOrderByAggregateInput: ["id", "description", "status", "internId", "jobId", "createdAt", "updatedAt"],
    JobApplicationMinOrderByAggregateInput: ["id", "description", "status", "internId", "jobId", "createdAt", "updatedAt"],
    JobApplicationSumOrderByAggregateInput: ["id", "internId", "jobId"],
    EnumStatusWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    EnumJobTypeFilter: ["equals", "in", "notIn", "not"],
    EnumTagFilter: ["equals", "in", "notIn", "not"],
    BoolFilter: ["equals", "not"],
    CompanyRelationFilter: ["is", "isNot"],
    JobCountOrderByAggregateInput: ["id", "position", "description", "jobType", "skillsRequired", "numOfOpenings", "duration", "postedAt", "location", "salary", "industry", "closed", "companyId", "updatedAt"],
    JobAvgOrderByAggregateInput: ["id", "numOfOpenings", "companyId"],
    JobMaxOrderByAggregateInput: ["id", "position", "description", "jobType", "numOfOpenings", "duration", "postedAt", "location", "salary", "industry", "closed", "companyId", "updatedAt"],
    JobMinOrderByAggregateInput: ["id", "position", "description", "jobType", "numOfOpenings", "duration", "postedAt", "location", "salary", "industry", "closed", "companyId", "updatedAt"],
    JobSumOrderByAggregateInput: ["id", "numOfOpenings", "companyId"],
    EnumJobTypeWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    EnumTagWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    BoolWithAggregatesFilter: ["equals", "not", "_count", "_min", "_max"],
    StringFieldUpdateOperationsInput: ["set"],
    EnumRoleFieldUpdateOperationsInput: ["set"],
    NullableStringFieldUpdateOperationsInput: ["set"],
    DateTimeFieldUpdateOperationsInput: ["set"],
    IntFieldUpdateOperationsInput: ["set", "increment", "decrement", "multiply", "divide"],
    JobCreateNestedManyWithoutCompanyInput: ["create", "connectOrCreate", "createMany", "connect"],
    JobUpdateManyWithoutCompanyInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    InternCreateinterestsInput: ["set"],
    JobApplicationCreateNestedManyWithoutInternInput: ["create", "connectOrCreate", "createMany", "connect"],
    InternUpdateinterestsInput: ["set", "push"],
    JobApplicationUpdateManyWithoutInternInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    InternCreateManyinterestsInput: ["set"],
    InternCreateNestedOneWithoutJobApplicationsInput: ["create", "connectOrCreate", "connect"],
    JobCreateNestedOneWithoutApplicationsInput: ["create", "connectOrCreate", "connect"],
    EnumStatusFieldUpdateOperationsInput: ["set"],
    InternUpdateOneRequiredWithoutJobApplicationsInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    JobUpdateOneRequiredWithoutApplicationsInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    JobCreateskillsRequiredInput: ["set"],
    JobApplicationCreateNestedManyWithoutJobInput: ["create", "connectOrCreate", "createMany", "connect"],
    CompanyCreateNestedOneWithoutJobsInput: ["create", "connectOrCreate", "connect"],
    EnumJobTypeFieldUpdateOperationsInput: ["set"],
    EnumTagFieldUpdateOperationsInput: ["set"],
    BoolFieldUpdateOperationsInput: ["set"],
    JobUpdateskillsRequiredInput: ["set", "push"],
    JobApplicationUpdateManyWithoutJobInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    CompanyUpdateOneRequiredWithoutJobsInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    JobCreateManyskillsRequiredInput: ["set"],
    NestedIntFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    NestedStringFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "not"],
    NestedEnumRoleFilter: ["equals", "in", "notIn", "not"],
    NestedStringNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "not"],
    NestedDateTimeFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    NestedIntWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_avg", "_sum", "_min", "_max"],
    NestedFloatFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    NestedStringWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "not", "_count", "_min", "_max"],
    NestedEnumRoleWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    NestedStringNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "not", "_count", "_min", "_max"],
    NestedIntNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    NestedDateTimeWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_min", "_max"],
    NestedEnumStatusFilter: ["equals", "in", "notIn", "not"],
    NestedEnumStatusWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    NestedEnumJobTypeFilter: ["equals", "in", "notIn", "not"],
    NestedEnumTagFilter: ["equals", "in", "notIn", "not"],
    NestedBoolFilter: ["equals", "not"],
    NestedEnumJobTypeWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    NestedEnumTagWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    NestedBoolWithAggregatesFilter: ["equals", "not", "_count", "_min", "_max"],
    JobCreateWithoutCompanyInput: ["position", "description", "jobType", "numOfOpenings", "duration", "postedAt", "location", "salary", "industry", "closed", "updatedAt", "skillsRequired", "applications"],
    JobCreateOrConnectWithoutCompanyInput: ["where", "create"],
    JobCreateManyCompanyInputEnvelope: ["data", "skipDuplicates"],
    JobUpsertWithWhereUniqueWithoutCompanyInput: ["where", "update", "create"],
    JobUpdateWithWhereUniqueWithoutCompanyInput: ["where", "data"],
    JobUpdateManyWithWhereWithoutCompanyInput: ["where", "data"],
    JobScalarWhereInput: ["AND", "OR", "NOT", "id", "position", "description", "jobType", "skillsRequired", "numOfOpenings", "duration", "postedAt", "location", "salary", "industry", "closed", "companyId", "updatedAt"],
    JobApplicationCreateWithoutInternInput: ["description", "status", "createdAt", "updatedAt", "job"],
    JobApplicationCreateOrConnectWithoutInternInput: ["where", "create"],
    JobApplicationCreateManyInternInputEnvelope: ["data", "skipDuplicates"],
    JobApplicationUpsertWithWhereUniqueWithoutInternInput: ["where", "update", "create"],
    JobApplicationUpdateWithWhereUniqueWithoutInternInput: ["where", "data"],
    JobApplicationUpdateManyWithWhereWithoutInternInput: ["where", "data"],
    JobApplicationScalarWhereInput: ["AND", "OR", "NOT", "id", "description", "status", "internId", "jobId", "createdAt", "updatedAt"],
    InternCreateWithoutJobApplicationsInput: ["userId", "bio", "email", "createdAt", "updatedAt", "interests"],
    InternCreateOrConnectWithoutJobApplicationsInput: ["where", "create"],
    JobCreateWithoutApplicationsInput: ["position", "description", "jobType", "numOfOpenings", "duration", "postedAt", "location", "salary", "industry", "closed", "updatedAt", "skillsRequired", "company"],
    JobCreateOrConnectWithoutApplicationsInput: ["where", "create"],
    InternUpsertWithoutJobApplicationsInput: ["update", "create"],
    InternUpdateWithoutJobApplicationsInput: ["userId", "bio", "email", "createdAt", "updatedAt", "interests"],
    JobUpsertWithoutApplicationsInput: ["update", "create"],
    JobUpdateWithoutApplicationsInput: ["position", "description", "jobType", "numOfOpenings", "duration", "postedAt", "location", "salary", "industry", "closed", "updatedAt", "skillsRequired", "company"],
    JobApplicationCreateWithoutJobInput: ["description", "status", "createdAt", "updatedAt", "intern"],
    JobApplicationCreateOrConnectWithoutJobInput: ["where", "create"],
    JobApplicationCreateManyJobInputEnvelope: ["data", "skipDuplicates"],
    CompanyCreateWithoutJobsInput: ["userId", "name", "description", "logo", "website", "CIN", "email", "createdAt", "updatedAt"],
    CompanyCreateOrConnectWithoutJobsInput: ["where", "create"],
    JobApplicationUpsertWithWhereUniqueWithoutJobInput: ["where", "update", "create"],
    JobApplicationUpdateWithWhereUniqueWithoutJobInput: ["where", "data"],
    JobApplicationUpdateManyWithWhereWithoutJobInput: ["where", "data"],
    CompanyUpsertWithoutJobsInput: ["update", "create"],
    CompanyUpdateWithoutJobsInput: ["userId", "name", "description", "logo", "website", "CIN", "email", "createdAt", "updatedAt"],
    JobCreateManyCompanyInput: ["id", "position", "description", "jobType", "numOfOpenings", "duration", "postedAt", "location", "salary", "industry", "closed", "updatedAt", "skillsRequired"],
    JobUpdateWithoutCompanyInput: ["position", "description", "jobType", "numOfOpenings", "duration", "postedAt", "location", "salary", "industry", "closed", "updatedAt", "skillsRequired", "applications"],
    JobApplicationCreateManyInternInput: ["id", "description", "status", "jobId", "createdAt", "updatedAt"],
    JobApplicationUpdateWithoutInternInput: ["description", "status", "createdAt", "updatedAt", "job"],
    JobApplicationCreateManyJobInput: ["id", "description", "status", "internId", "createdAt", "updatedAt"],
    JobApplicationUpdateWithoutJobInput: ["description", "status", "createdAt", "updatedAt", "intern"]
};
function applyInputTypesEnhanceMap(inputTypesEnhanceMap) {
    for (const inputTypeEnhanceMapKey of Object.keys(inputTypesEnhanceMap)) {
        const inputTypeName = inputTypeEnhanceMapKey;
        const typeConfig = inputTypesEnhanceMap[inputTypeName];
        const typeClass = inputTypes[inputTypeName];
        const typeTarget = typeClass.prototype;
        applyTypeClassEnhanceConfig(typeConfig, typeClass, typeTarget, inputsInfo[inputTypeName]);
    }
}
exports.applyInputTypesEnhanceMap = applyInputTypesEnhanceMap;
