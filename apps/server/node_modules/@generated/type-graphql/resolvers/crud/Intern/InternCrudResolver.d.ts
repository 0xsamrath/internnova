import { GraphQLResolveInfo } from "graphql";
import { AggregateInternArgs } from "./args/AggregateInternArgs";
import { CreateInternArgs } from "./args/CreateInternArgs";
import { CreateManyInternArgs } from "./args/CreateManyInternArgs";
import { DeleteInternArgs } from "./args/DeleteInternArgs";
import { DeleteManyInternArgs } from "./args/DeleteManyInternArgs";
import { FindFirstInternArgs } from "./args/FindFirstInternArgs";
import { FindManyInternArgs } from "./args/FindManyInternArgs";
import { FindUniqueInternArgs } from "./args/FindUniqueInternArgs";
import { GroupByInternArgs } from "./args/GroupByInternArgs";
import { UpdateInternArgs } from "./args/UpdateInternArgs";
import { UpdateManyInternArgs } from "./args/UpdateManyInternArgs";
import { UpsertInternArgs } from "./args/UpsertInternArgs";
import { Intern } from "../../../models/Intern";
import { AffectedRowsOutput } from "../../outputs/AffectedRowsOutput";
import { AggregateIntern } from "../../outputs/AggregateIntern";
import { InternGroupBy } from "../../outputs/InternGroupBy";
export declare class InternCrudResolver {
    intern(ctx: any, info: GraphQLResolveInfo, args: FindUniqueInternArgs): Promise<Intern | null>;
    findFirstIntern(ctx: any, info: GraphQLResolveInfo, args: FindFirstInternArgs): Promise<Intern | null>;
    interns(ctx: any, info: GraphQLResolveInfo, args: FindManyInternArgs): Promise<Intern[]>;
    createIntern(ctx: any, info: GraphQLResolveInfo, args: CreateInternArgs): Promise<Intern>;
    createManyIntern(ctx: any, info: GraphQLResolveInfo, args: CreateManyInternArgs): Promise<AffectedRowsOutput>;
    deleteIntern(ctx: any, info: GraphQLResolveInfo, args: DeleteInternArgs): Promise<Intern | null>;
    updateIntern(ctx: any, info: GraphQLResolveInfo, args: UpdateInternArgs): Promise<Intern | null>;
    deleteManyIntern(ctx: any, info: GraphQLResolveInfo, args: DeleteManyInternArgs): Promise<AffectedRowsOutput>;
    updateManyIntern(ctx: any, info: GraphQLResolveInfo, args: UpdateManyInternArgs): Promise<AffectedRowsOutput>;
    upsertIntern(ctx: any, info: GraphQLResolveInfo, args: UpsertInternArgs): Promise<Intern>;
    aggregateIntern(ctx: any, info: GraphQLResolveInfo, args: AggregateInternArgs): Promise<AggregateIntern>;
    groupByIntern(ctx: any, info: GraphQLResolveInfo, args: GroupByInternArgs): Promise<InternGroupBy[]>;
}
