"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.JobCrudResolver = void 0;
const tslib_1 = require("tslib");
const TypeGraphQL = (0, tslib_1.__importStar)(require("type-graphql"));
const graphql_fields_1 = (0, tslib_1.__importDefault)(require("graphql-fields"));
const AggregateJobArgs_1 = require("./args/AggregateJobArgs");
const CreateJobArgs_1 = require("./args/CreateJobArgs");
const CreateManyJobArgs_1 = require("./args/CreateManyJobArgs");
const DeleteJobArgs_1 = require("./args/DeleteJobArgs");
const DeleteManyJobArgs_1 = require("./args/DeleteManyJobArgs");
const FindFirstJobArgs_1 = require("./args/FindFirstJobArgs");
const FindManyJobArgs_1 = require("./args/FindManyJobArgs");
const FindUniqueJobArgs_1 = require("./args/FindUniqueJobArgs");
const GroupByJobArgs_1 = require("./args/GroupByJobArgs");
const UpdateJobArgs_1 = require("./args/UpdateJobArgs");
const UpdateManyJobArgs_1 = require("./args/UpdateManyJobArgs");
const UpsertJobArgs_1 = require("./args/UpsertJobArgs");
const helpers_1 = require("../../../helpers");
const Job_1 = require("../../../models/Job");
const AffectedRowsOutput_1 = require("../../outputs/AffectedRowsOutput");
const AggregateJob_1 = require("../../outputs/AggregateJob");
const JobGroupBy_1 = require("../../outputs/JobGroupBy");
let JobCrudResolver = class JobCrudResolver {
    async job(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).job.findUnique({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async findFirstJob(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).job.findFirst({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async jobs(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).job.findMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async createJob(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).job.create({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async createManyJob(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).job.createMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async deleteJob(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).job.delete({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async updateJob(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).job.update({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async deleteManyJob(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).job.deleteMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async updateManyJob(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).job.updateMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async upsertJob(ctx, info, args) {
        const { _count } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).job.upsert({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async aggregateJob(ctx, info, args) {
        return (0, helpers_1.getPrismaFromContext)(ctx).job.aggregate({
            ...args,
            ...(0, helpers_1.transformFields)((0, graphql_fields_1.default)(info)),
        });
    }
    async groupByJob(ctx, info, args) {
        const { _count, _avg, _sum, _min, _max } = (0, helpers_1.transformFields)((0, graphql_fields_1.default)(info));
        return (0, helpers_1.getPrismaFromContext)(ctx).job.groupBy({
            ...args,
            ...Object.fromEntries(Object.entries({ _count, _avg, _sum, _min, _max }).filter(([_, v]) => v != null)),
        });
    }
};
(0, tslib_1.__decorate)([
    TypeGraphQL.Query(_returns => Job_1.Job, {
        nullable: true
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, FindUniqueJobArgs_1.FindUniqueJobArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], JobCrudResolver.prototype, "job", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Query(_returns => Job_1.Job, {
        nullable: true
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, FindFirstJobArgs_1.FindFirstJobArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], JobCrudResolver.prototype, "findFirstJob", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Query(_returns => [Job_1.Job], {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, FindManyJobArgs_1.FindManyJobArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], JobCrudResolver.prototype, "jobs", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Mutation(_returns => Job_1.Job, {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, CreateJobArgs_1.CreateJobArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], JobCrudResolver.prototype, "createJob", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Mutation(_returns => AffectedRowsOutput_1.AffectedRowsOutput, {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, CreateManyJobArgs_1.CreateManyJobArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], JobCrudResolver.prototype, "createManyJob", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Mutation(_returns => Job_1.Job, {
        nullable: true
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, DeleteJobArgs_1.DeleteJobArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], JobCrudResolver.prototype, "deleteJob", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Mutation(_returns => Job_1.Job, {
        nullable: true
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, UpdateJobArgs_1.UpdateJobArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], JobCrudResolver.prototype, "updateJob", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Mutation(_returns => AffectedRowsOutput_1.AffectedRowsOutput, {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, DeleteManyJobArgs_1.DeleteManyJobArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], JobCrudResolver.prototype, "deleteManyJob", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Mutation(_returns => AffectedRowsOutput_1.AffectedRowsOutput, {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, UpdateManyJobArgs_1.UpdateManyJobArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], JobCrudResolver.prototype, "updateManyJob", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Mutation(_returns => Job_1.Job, {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, UpsertJobArgs_1.UpsertJobArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], JobCrudResolver.prototype, "upsertJob", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Query(_returns => AggregateJob_1.AggregateJob, {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, AggregateJobArgs_1.AggregateJobArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], JobCrudResolver.prototype, "aggregateJob", null);
(0, tslib_1.__decorate)([
    TypeGraphQL.Query(_returns => [JobGroupBy_1.JobGroupBy], {
        nullable: false
    }),
    (0, tslib_1.__param)(0, TypeGraphQL.Ctx()),
    (0, tslib_1.__param)(1, TypeGraphQL.Info()),
    (0, tslib_1.__param)(2, TypeGraphQL.Args()),
    (0, tslib_1.__metadata)("design:type", Function),
    (0, tslib_1.__metadata)("design:paramtypes", [Object, Object, GroupByJobArgs_1.GroupByJobArgs]),
    (0, tslib_1.__metadata)("design:returntype", Promise)
], JobCrudResolver.prototype, "groupByJob", null);
JobCrudResolver = (0, tslib_1.__decorate)([
    TypeGraphQL.Resolver(_of => Job_1.Job)
], JobCrudResolver);
exports.JobCrudResolver = JobCrudResolver;
